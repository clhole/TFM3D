function [ u, disptime ] = Displacement( imgpair, uparam )
%DISPLACEMENT determines the displacement field based on a 3D bead image pair
%Input:
%  <imgpair>  image pair generated by the function CreateBeadImagePair
%  <uparam>   structure containing the displacement field calculation parameters:
%             .ualg             displacement calculation algorithms        {1xn}
%                               (options: 'PDVC','GDVC','LK3D','FIDVC')
%             .itp              displacement interpolation locations       {1xn}
%                               (options: 'bead','grid','cell')
%             .itp_spacing      grid spacing [µm] for itp = 'grid'         [1xn]
%             .ROIsize          region of interest [% cell size]           [1xn]
%             .PDVC.umax        PDVC: guess for maximum displacement [µm]  [1xn]
%             .PDVC.cbeads_win  PDVC: bead concentration per search window [1xn]
%             .GDVC.maxwinsize  GDVC: initial search window size [px]      [nx3]
%             .GDVC.minwinsize  GDVC: minimum search window size [px]      [nx3]
%             .GDVC.spacing     GDVC: search window spacing [px]           [nx3]
%             .FIDVC.sSize      FIDVC: Interrogation window size [px]      [nx3]
%Output:
%  <u>        structure containing the calculated displacement fields [µm]
%CL

% Get images and parameters
img0 = imgpair.img0;            % Bead image at t=t0 (with cell)
img1 = imgpair.img1;            % Bead image at t=t1 (without cell)
imgparam = imgpair.imgparam;    % Image generation parameters
rbead = imgparam.rbead;         % Bead radius [µm]
vxsize = imgparam.vxsize;       % Voxel size [µm]
range = imgparam.range;         % Nodal range [µm]
ualg = uparam.ualg;             % Displacement calculation algorithm
disptime.PDVC = 0;
disptime.GDVC = 0;
disptime.FIDVC = 0;
% Particle-based DVC
%*******************************************************************************
if any(strcmp('PDVC',ualg))
    
    u.PDVC = table();
    
    for i = 1:size(uparam.PDVC.umax,2)
        for j = 1:size(uparam.PDVC.cbeads_win,2)
            tic
            % Get PDVC parameters
            umax = uparam.PDVC.umax(i);
            cbeads_win = uparam.PDVC.cbeads_win(j);
            
            % Calculate bead displacements
            fprintf('Displacement field calculation: PDVC with umax = %.1f, cbeads_win = %.1f\n',...
                umax,cbeads_win)
            [pos0PDVC, uPDVC] = PDVCparallel(img0,img1,rbead,vxsize,range,umax,cbeads_win);
            
            % Evaluate displacement field at specified locations
            evalPDVC = DisplacementEval(pos0PDVC,uPDVC,'PDVC',imgparam,uparam);
            
            % Write data to table
            u.PDVC = [u.PDVC;[table(umax,cbeads_win),evalPDVC]];
            disptime.PDVC = toc;
        end
    end
    
end

% Grid-based DVC
%*******************************************************************************
if any(strcmp('GDVC',ualg))
    
    u.GDVC = table();
    
    for i = 1:size(uparam.GDVC.maxwinsize,1)
        for j = 1:size(uparam.GDVC.minwinsize,1)
            for k = 1:size(uparam.GDVC.spacing,1)
                tic
                % Get GDVC parameters
                maxwinsize = uparam.GDVC.maxwinsize(i,:);
                minwinsize = uparam.GDVC.minwinsize(j,:);
                spacing = uparam.GDVC.spacing(k,:);
                
                % Calculate displacements at grid nodes
                fprintf(['Displacement field calculation: GDVC with maxwinsize = ',...
                    '[%d %d %d], minwinsize = [%d %d %d], spacing = [%d %d %d]\n'],...
                    maxwinsize,minwinsize,spacing)
                [pos0GDVC,uGDVC] = GDVCparallel(img0,img1,rbead,vxsize,range,maxwinsize,minwinsize,spacing);
                
                % Evaluate displacement field at specified locations
                evalGDVC = DisplacementEval(pos0GDVC,uGDVC,'GDVC',imgparam,uparam);
                
                % Write data to table
                u.GDVC = [u.GDVC;[table(maxwinsize,minwinsize,spacing),evalGDVC]];
                disptime.GDVC = toc;
            end
        end
    end
    
end

% FIDVC (Franck lab)
%*******************************************************************************
if any(strcmp('FIDVC',ualg))
    
    u.FIDVC = table();
    
    tic
    % Get FIDVC parameters
    sSize = uparam.FIDVC.sSize;
    
    % Calculate displacements at grid nodes
    fprintf(['Displacement field calculation: FIDVC with interrogation window =  [%d %d %d]\n '],...
        sSize)
    [pos0FIDVC,uFIDVC] = IDVC_nwili(img0,img1,sSize, vxsize, range);
    
    % Evaluate displacement field at specified locations
    evalFIDVC = DisplacementEval(pos0FIDVC,uFIDVC,'FIDVC',imgparam,uparam);
    
    % Write data to table
    u.FIDVC = [table(sSize),evalFIDVC];
    disptime.FIDVC = toc;
    
end

% Include simulated displacements
%*******************************************************************************
if any(strcmp('known',ualg))
    
    incl = uparam.known.incl;
    
    % Get simulated displacement data
    posknown = imgparam.fuFEA.x.Points;
    uknown(:,1) = imgparam.fuFEA.x.Values;
    uknown(:,2) = imgparam.fuFEA.y.Values;
    uknown(:,3) = imgparam.fuFEA.z.Values;
    
    % Evaluate displacement field at specified locations
    fprintf('Get simulated displacement field... \n')
    evalknown = DisplacementEval(posknown,uknown,'known',imgparam,uparam);
    
    % Write data to table
    u.known = [table(incl),evalknown];
    
end

end

